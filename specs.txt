Техническое задание на создание проекта DOMLearn. PHP_MySQL_JS_JSON_CSS с готовой базой и структурой.

Задача.
Создай full-stack web-приложение представляющее собой сайт для обучения студентов JavaScript DOM.

Применяемый стек технологий.
Web приложение должно быть создано без использования backend или frontend фреймворков или библиотек. 
Backend должен быть организован на чистом PHP без фреймворков и библиотек. Тексты уроков и другая информация должна хранится в базе данных MySQL в виде JSON.
Frontend должен быть только чистый HTML, CSS, JavaScript. Обязательно без фреймворков и библиотек, в т.ч. React и Next. Чтобы можно было сделать деплой на простом хостинге.
Структура проекта должна быть минимальна с минимальным (насколько это возможно в данном стеке) количеством файлов и подкаталогов.
Всё должно быть просто и минимально.

Общее содержание и функционал сайта
Сайт должен выглядеть как последовательность уроков разбитых на 5 уровней по сложности (и последовательности изучения). Внутри уровней должны быть разделы, внутри разделов уроки. (Для образца сделай в 1 уровне 1 раздел с 1 уроком). 
Названия уровней жёстко заданы в двух вариантах:
1. Кириллицей на русском языке для отображения в интерфейсе;
2. Латиницей на английском языке для имён файлов, каталогов и URL.
Имена уровней следующие (кириллицей | латиницей):
1. Начало | start
2. Основы | basics
3. Углубление | deep
4. Продвинутое | advanced
5. Гуру | guru
Английские названия используются для slug, для имён файлов и для URL.
Количество, порядок, названия уровней не меняются. Количество, порядок, названия разделов и уроков определяет админ. (примерно 10 разделов в каждом уровне и 10-20 уроков в каждом разделе). Причём, и количество, и названия, и порядок разделов и уроков может меняться.
Структура URL должна быть примерно такая: level_number-level_name/section_number-<section_name>/lesson_number-<lesson_name>
Отдельной Главной страницы не нужно. При заходе на сайт пользователь должен сразу попадать на страницу уровней (оформленных визуально как карточки). В каждой карточке должен быть кликабельный заголовок ведущий на страницу этого уровня. Внутри карточки уровня должны быть карточки разделов. Заголовок карточки раздела должен быть кликабельным и вести на страницу данного раздела, на которой должны быть карточки уроков с кликабельными заголовками ведущие на страницу этого урока. Внутри карточки раздела должны быть кликабельные заголовки уроков ведущие на страницу соответствующего урока.
Добавление уроков должно быть похоже на добавление постов в блоге и осуществляться в редакторе в админ-панели. 

Описание урока
Каждый урок должен состоять из теоретического материала, тестирования, задач. 
Тесты должны быть простого типа: вопрос, 4 варианта ответа из которых только один правильный. Количество тестовых вопросов админ должен определять сам для каждого урока. (для образца сделай три тестовых вопроса в 1 уроке 1 раздела 1 уровня).
После каждого ответа - сразу, без нажатия кнопки проверить, пользователю показывается результат. Правильный ответ должен подсвечиваться зелёной галочкой, а неправильный - красным крестиком.
Прогресс и результаты прохождение тестов сохранять не нужно.
Статистика по пользователям (кто какие уроки прошел) не нужна.
Для задач интерактивный редактор с проверкой кода не нужен. Должно быть только условие задачи.
В конце каждого урока должны быть кнопки предыдущий/следующий/в оглавление, но только в рамках данного раздела. В последнем уроке раздела, должна быть кнопка перехода на главную страницу.
Каждый урок должен соответствовать отдельной странице.

Описание редактора
Для создания и редактирования уроков должен быть текстовый редактор CKEditor 5 с возможностью выбора шрифта, цвета, и других параметров текста для содержимого уроков. При редактировании текста урока не должно быть необходимости использовать HTML-тэги. Все возможности редактирования должны быть обеспечены командами текстового редактора. Также нужна  возможность добавления таблиц, списков, ссылок, изображений в текст уроков. 
Форматы изображений: png, jpg, webp, svg. Для поддержки форматов изображений используй необходимые библиотеки. Нужна возможность загрузки файлов изображений через админку и сохранения их в файловой системе сервера, а также путей к файлам изображений в базе данных в записи соответствующего урока. Предварительный просмотр загруженных изображений Не нужен. Ограничения на размер загружаемых файлов: максимум 5 МБ для изображений. Сжатие/оптимизация изображений не требуется.
Подсветка кода в этом приложении не нужна.
В задачах должна быть возможность вставки фрагментов кода и изображений.
Текстовый редактор должен быть в на странице администрирования (админ-панели). 
Всё должно быть просто и минимально.

Описание админ-панели
Админ-панель должна быть на отдельной странице по адресу: <url сайта>/bod. Вход в админ панель должен быть с формой авторизации со следующими данными:
Логин: bodryakov.web
Пароль: Anna-140275
Логин и пароль должны быть зашиты в коде, хранить их в базе данных не нужно.
Вход в админ-панель должен быть только по URL. Кнопки входа на страницах сайта быть не должно.
Дополнительная защита от XSS/CSRF атак в админке не нужна.
На форме авторизации должен быть чек-бокс “запомнить меня” с запоминанием в localstorage на 30 дней.
Админ и редактор уроков должен быть только один, добавление других админов не нужно.
В Админ-панели должно быть предусмотрено добавление и удаление разделов и уроков, а также редактирование заголовков разделов и уроков. Удаление, добавление и редактирование должно обеспечиваться соответствующими кнопками с соответствующими иконками и всплывающими подсказками.
При удалении, модальное окно подтверждения не нужно.
В момент сохранения названий разделов и уроков должна быть валидация:
Поле названия раздела заполнено и название не повторяется
Поле slug заполнено и slug не повторяется. Slug должен быть только маленькими английскими буквами и дефисы, пробелы запрещены.
Порядковый номер заполнен и не повторяется.
В Админ-панели должно быть предусмотрено создание страниц уроков и текстов уроков, тестов, задач с помощью полнофункционального редактора текста CKEditor 5. 
В интерфейсе создания тестов должны быть отдельные поля для вопроса, 4 вариантов ответов и checkbox для отметки правильного ответа.
Должна быть возможность добавлять изображения. Изображения могут добавляться как в текст теории, так и в текст задач. Изображения должны загружаться через стандартное диалоговое окно выбора файла. Реализовывать интерфейс drag and drop для загрузки файлов не нужно. Изображения должны сохраняться в файловой системе в каталоге соответствующего урока. При удалении урока изображения тоже должны удаляться из файловой системы.
При создании и редактировании урока должна быть кнопка “сохранить черновик”, которая сохраняет данные урока, но не публикует их, а также кнопка “опубликовать”, которая публикует урок в открытый доступ.
В админ‑панели должна быть возможность изменения порядка разделов внутри уровня и уроков внутри раздела без использования drag and drop (через явные кнопки/стрелки/поля порядка).
После редактирования информации в админ-панели все изменения должны сохранятся в соответствующих записях базы данных в формате JSON. 

Описание BackEnd
Должен быть функционал запросов с PHP на MySQL на создание, изменение, удаление данных уровней, разделов, уроков.
При выборе пользователем урока должна формироваться HTML-страница соответствующего урока на основе данных из базы данных.
Изображения должны храниться в виде файлов в каталоге соответствующего урока.
Структурированный и форматированный текст урока должен хранится в формате JSON в базе данных.
Весь функционал взаимодействия с базой данных, весь функционал CRUD операций, включая весь необходимый JS-код должен быть только в одном файле с именем crud.php. 
Обработку URL осуществлять через PHP-роутинг.

Описание базы данных
База данных MySQL, к которой нужно подключаться, уже создана, но пустая. 
Имеет следующие параметры подключения:
DB_HOST=localhost
DB_NAME=p-351366_dom-learn
DB_USER=p-351366_dom-learn
DB_PASSWORD=Anna-140275
DB_CHARSET=utf8mb4
Запиши эти данные в файл .env .
База данных и все таблицы должны быть в кодировке utf8mb4_unicode_ci
В базе данных должно быть три таблицы: 
levels для уровней,
sections для разделов,
lessons для уроков.
Названия (заголовки) уровней, разделов, уроков имеют два варианта, на русском (для отображения в интерфейсе) и на английском (для названий файлов, каталогов и URL, поэтому в таблицах базы данных для названий (заголовков) должно быть два поля. Все данные урока, включая теорию, тесты, задачи, хранятся в структурированном виде в JSON формате в поле content таблицы lessons. В таблицах sections и lessons должно быть специальное поле сортировки section_order и lesson_order для сохранения и для изменения порядка разделов и уроков без использования drag and drop.
Поля для даты и времени создания раздела или урока не нужно.
Создай структуру таблиц базы данных соответствующую данному приложению.
Напиши sql скрипт создания подходящей для этого приложения базы данных с нужной структурой таблиц и связей между ними.
Напиши sql скрипт заполнения базы данных тестовыми данными.
Протестируй подключение к базе данных.

Описание дизайна
Должны быть хлебные крошки вида Уровень/<название_раздела>/<название_урока>.
Хлебные крошки должны быть кликабельны.
Дизайн web-приложения должен быть богатый, красивый привлекательный, выполненный в плоском дизайне material design.
Должна быть адаптивность, со следующими значениями точек перелома:
Минимальная ширина: 360px,
Смартфоны: до 720px,
Планшеты: до 1280px,
Ноутбуки: до 1600px,
Мониторы: до 1920px,
Большие экраны: 1920px и выше.
Адаптивность должна быть сделана с использованием самых новейших возможностей CSS.
Должно быть переключением светлой и тёмной темы с кнопкой в узкой верхней панели справа. 
Цвета предпочтительны серые, голубые, синие. Базовая тема светлая.
Должен использоваться чистый современный CSS. Без поддержки старых браузеров. Вместо Flex используй Grid. Промотка должна быть плавная. 

Инструкции для Windsurf.
Для уточнения требований и параметров web-приложения - задай мне дополнительные вопросы. 
Не начинай создавать приложение, даже начальные файлы, даже базовый каркас, даже общую структуру проекта, даже sql-структуру базы данных, пока не получишь ответы на все вопросы, включая все дополнительные и уточняющие вопросы.
После получения ответа на все вопросы - сначала создай структуру проекта, всех файлов и каталогов, и предложи мне на утверждение.
После создания структуры проекта, сделай текстовое описание проекта, с общим описанием проекта, описанием различных особенностей и тонкостей, описанием структуры базы данных, описанием того, как ты будешь создавать проект.
Только после утверждения структуры и согласования всех параметров - начинай создавать приложение.
Не нужно создавать отдельный файл для каждой сущности или каждого функционала или каждого сценария. Нужно стремиться, чтобы файлов было как можно меньше. Похожий функционал должен быть объединён в одном файле. Например, в случае CRUD-операций, не нужно для каждой операции  create, read, update, delete, создавать отдельный файл, нужно объединить все CRUD операции в одном файле crud.php. И так во всех подобных случаях.
В каждый файл нужно добавлять комментарии на русском языке, в частности: в начало самого файла, с описанием назначения и функционала файла, комментарии к каждому существенному блоку кода, функции, циклу, условию, импорту.


Если ты не сможешь сделать что то из данного технического задания, останавливайся и честно сообщай.

Если во время создания приложения возникнут вопросы, останавливайся и задавай вопросы.

Конец технического задания.


Структура проекта
/index.php — публичная часть и роутинг по URL (уровни → разделы → уроки, хлебные крошки, навигация, темы)
/crud.php — весь backend CRUD на PHP (все запросы к MySQL, загрузка изображений, вся логика админки и её JS)
/style.css — общий современный CSS (Grid, темы, адаптив, material-like стили)
/.env — параметры подключения к БД (из ТЗ)
/.htaccess — минимальные правила для ЧПУ-роутинга на index.php и статики
/robots.txt — запрет индексации /bod
/fonts/roboto/ — локальные шрифты Roboto (.woff2)
/ckeditor/ — локальная сборка CKEditor 5 с нужными плагинами
/images/ — общие изображения UI, а также папки уроков: images/lesson_{lesson_id}/
/sql/db_schema.sql — создание схемы БД
/sql/db_seed.sql — тестовые данные (уровень/раздел/урок с 3 вопросами)


Ключевые договорённости
Админка доступна по пути /bod (роутинг через index.php)
Весь доступ к БД и CRUD строго в crud.php; публичная часть вызывает функции из crud.php для чтения
Загрузка изображений уроков — в images/lesson_{lesson_id}/; SVG запрещён; до 5 МБ; любые количества
Slug: только [a-z-], без цифр и пробелов; уникальность slug и порядка внутри родителя
JSON контент урока: сначала tests, затем tasks, theory_html; без annotation
Непубликованные уроки — не видны и по прямой ссылке 404
Темы: светлая/тёмная, переключатель справа, выбор хранится в localStorage
Статус “Сохранено/Опубликовано” показывается рядом с кнопкой (справа на больших экранах/снизу на маленьких), исчезает через 5 сек
Выход в админке: чистим localStorage и завершаем PHP‑сессию
Ошибки PHP показываем и в проде на время тестирования (позже подскажу, как отключить)


Общее описание
DOMLearn — минималистичное full‑stack web‑приложение на чистых PHP/MySQL/HTML/CSS/JS для обучения DOM.
Публичная часть: уровни → разделы → уроки (карточки), хлебные крошки, навигация, светлая/тёмная темы, адаптив на CSS Grid.
Админка: /bod, авторизация с фиксированными данными, “запомнить меня”, CRUD уровней/разделов/уроков, CKEditor 5 для теории/задач, конструктор тестов “1 вопрос + 4 варианта + одна галочка”.
Данные уроков: JSON (порядок ключей: tests → tasks → theory_html). Публикация через is_published.
Структура данных и БД
Три таблицы: levels, sections, lessons. Кодировка utf8mb4_unicode_ci.
Уникальность slug и порядков внутри родителя.
Связи: levels → sections → lessons (CASCADE).
Скрипты: sql/db_schema.sql, sql/db_seed.sql.
Роутинг и URL
Формат: level_number-level_slug/section_number-section_slug/lesson_number-lesson_slug.
Изменение порядка влечет смену URL — допустимо.
Непубликованные уроки скрыты и по прямой ссылке — 404.
Файлы и каталоги
index.php (публичный роутинг и рендер), crud.php (все CRUD/загрузка изображений/админ‑JS), style.css (Grid/темы/адаптив).
.env (подключение к БД), .htaccess (ЧПУ), robots.txt (Disallow: /bod).
Шрифты /fonts/roboto/, редактор /ckeditor/, картинки /images/ (в т.ч. images/lesson_{lesson_id}/).
Админ‑панель
Авторизация: логин/пароль в коде, “запомнить меня” в localStorage.
Выход: очистка localStorage + завершение PHP‑сессии.
Сортировка: изменение порядка с пересчетом начиная с 1; сохранение одним запросом; без drag and drop.
Статусы “✓ Сохранено/Опубликовано” рядом с кнопкой (позиция адаптивная), исчезают через 5 сек.
Загрузка изображений: POST crud.php?action=upload_image, параметр lesson_id, ответ JSON с URL; png/jpg/webp, до 5 МБ, SVG запрещен.
Дизайн и фронтенд
Современный material‑like плоский стиль, светлая по умолчанию, переключатель темы справа сверху.
Адаптивные брейкпоинты: 360 / 720 / 1280 / 1600 / 1920 / 1920+.
Тесты: мгновенная проверка, без возможности смены ответа.
Иконки: стандартные символы/эмодзи Unicode.
SEO: минимальные title/description; 404‑страница с кнопкой “На главную”.


План реализации
Шаг 1: Создать sql/db_schema.sql и sql/db_seed.sql (выполнено).
Шаг 2: Реализовать базовый каркас index.php: роутинг, вывод уровней/разделов/уроков, хлебные крошки, навигация, проверка публикации.
Шаг 3: Реализовать crud.php: подключение к БД, безопасный парсер .env, все CRUD‑эндпоинты (levels/sections/lessons), загрузка изображений (action=upload_image), валидации slug/порядка, сохранение порядка (без drag and drop).
Шаг 4: Реализовать админ‑UI внутри crud.php (HTML+JS без библиотек): авторизация, формы редактирования, CKEditor, конструктор тестов, кнопки публикации/черновика, статусы.
Шаг 5: style.css: темы, Grid‑сетка, карточки, адаптив, анимации, состояния.
Шаг 6: Тестирование на вашем хостинге (ошибки включены), финальные правки. Затем дам инструкции как отключить ошибки.