Ключевые замечания и риски
Статические ассеты через /assets/: у нас уже есть asset()-хелпер и роутер в index.php, который отдает CSS/JS с корректными Content-Type и кэшированием (с версионированием через filemtime). При переносе style.css и app.js в /assets важно:
Либо обновить резолвер ассетов так, чтобы /assets/style.css искался в физическом каталоге /assets/style.css.
Либо изменить публичные пути на /assets/assets/style.css и /assets/assets/app.js. Я рекомендую первый вариант (сохранить публичные URL, а в маппинге расширить поиск в /assets).
Не смешивать вывод и логику: в db-api.php должны быть чистые функции работы с БД (возвращают данные/бросают исключения), без echo/exit. Весь вывод JSON — в api.php.
Инициализация: config.php должен инициализировать .env, соединение с БД и экспортировать фабрику get_db() или PDO-инстанс. Все остальные файлы должны подключать только config.php.
Авторизация: bod/auth.php должен централизовать session_start(), login/logout, проверку роли админа, CSRF-токены для форм/загрузок. Исключить дублирование в других местах.
JS- и CSS-разделение: подключайте admin-скрипты/стили только на админ-страницах, чтобы не грузить лишнее на публичных страницах.
Обратная совместимость: на первом шаге лучше сделать «переадресацию» из старых точек входа (например, оставить заглушки, которые require новые файлы), чтобы снизить риск внезапных 500/404.


Рекомендованная структура (минимально инвазивная)
config.php — загрузка .env, настройка PDO, общие константы (BASE_PATH, пути до каталогов ассетов/загрузок).
db-api.php — функции CRUD и прочие SQL-операции. Только логика БД.
api.php — HTTP-слой API: роутинг методов, валидация входа, вызов db-api, единый JSON-ответ, централизованная обработка ошибок.
img-upload.php — обработка загрузки: проверка MIME/размера, уникальные имена, безопасная директория (/uploads), возврат URL. Важно: запрещать исполнение в /uploads (нет .php), проверка реального mime через finfo.
bod/auth.php — login/logout, проверка сессий, password_hash/password_verify, защита от перебора (простая задержка/счетчик), CSRF.
/bod/bod.js — код админки.
/bod/editor.js — код редактора/CKEditor.
/assets/style.css — публичные стили (не админские).
/assets/app.js — публичный JS.
/bod/admin-style.css — стили админ-панели и редактора.
index.php — без изменений в логике страниц; если потребуется, только расширить массив путей для /assets/ на каталог /assets (без изменения публичных URL).


Практические советы по миграции (чтобы не сломать)
Ввести config.php:
Инкапсулируйте загрузку .env и создание PDO. Экспортируйте get_db(): PDO. Добавьте константы путей (например, ASSETS_DIR = DIR . '/assets').
Обновить резолвер ассетов:
В месте, где index.php отдает /assets/, добавьте поиск файлов сначала в /assets, затем в старых местах. Так существующие ссылки вида asset('style.css') останутся рабочими, даже после физического переноса.
Выделить db-api.php:
Вырежьте из crud.php все SQL в функции. Дайте им понятные имена и сигнатуры; бросайте исключения на ошибках.
Создать api.php:
Переместите API-обработчики (после вашего комментария в crud.php) сюда. Все ответы — через единый helper json_response($data, $status=200). Валидация входных данных обязательна.
img-upload.php:
Перенесите все обработки загрузок, добавьте валидации: размер, расширение, mime, генерацию уникального имени, и возврат JSON с URL. Сохранение в /uploads; убедиться, что /uploads не исполняемый.
bod/auth.php:
Сконцентрируйте login/logout, роль администратора, csrf_token(). В остальном коде только вызывайте эти функции.
JS/CSS разделить и подключать условно:
На публичных страницах — /assets/style.css и /assets/app.js.
На админ-страницах — дополнительно /bod/admin-style.css, /bod/bod.js, /bod/editor.js.
Старые точки входа:
В crud.php временно оставьте «тонкий мост»: require config.php, затем require нужные новые файлы и проксируйте вызовы. Это позволит откатиться быстро.
Тест-план после каждого шага:
Базовая навигация, загрузка ассетов (проверьте 200 вместо 404).
CRUD операции.
API ответы и коды ошибок.
Логин/логаут, доступ к админке без/с авторизацией.
Загрузка изображений, предпросмотр, корректные URL, защита от невалидных файлов.


Качество кода и инструменты
PHPStan (уровень 5–7) и PHP-CS-Fixer — для статики и стиля.
ESLint + Prettier для JS.
Stylelint для CSS (опционально).
Логирование ошибок в файл через set_error_handler/try-catch в api.php; в проде — без стек-трейсов в ответе.
Единый .env.example, не коммитить реальные секреты.
Если вы не используете Composer — подумайте, стоит ли подключить vlucas/phpdotenv (если уже задействован, оставляем как есть).


По структуре имен и API
Имена функций в db-api.php: глагол + сущность (get_post_by_id, create_post, update_post, delete_post).
В api.php — простая маршрутизация по ?action=... или по path (/api/...); если уже есть схема, не меняем URL на первом этапе, чтобы не ломать фронт.


Что бы я предложил дополнительно
Ввести тонкий мини-роутер для api.php, чтобы уйти от «громоздких if» без фреймворков.
Ввести единый ответ JSON-формата: { ok: true|false, data|error }.
Добавить простую RoleGuard для админских API.
Для загрузок — генерация подкаталогов по дате (uploads/2025/08/) для порядка.
Вести CHANGELOG по шагам и мелкие коммиты с описанием изменений.


Вопросы для уточнения перед началом
Сейчас asset()-хелпер и /assets/ ожидают файлы в корне? Подтверждаете, что можем расширить поиск на /assets, не меняя публичные URL?
Есть ли в crud.php точки, где смешан вывод HTML и выполнение SQL в одном блоке? Это повлияет на разрез между db-api.php и api.php.
Используется ли Composer и phpdotenv уже? Если нет, оставляем ручную загрузку .env или подключаем пакет?
Есть ли отдельная страница/маршрут для админки, куда подключать admin-style.css и bod.js/editor.js?


Готов действовать по вашему плану пошагово и безопасно. Предлагаю начать с:
Создать config.php и расширить резолвер /assets/ на каталог /assets (без изменения index.php логики страниц).
Перенести style.css и app.js физически в /assets, проверить, что asset() продолжает отдавать 200.
Затем постепенно резать crud.php на db-api.php, api.php, img-upload.php и bod/auth.php.